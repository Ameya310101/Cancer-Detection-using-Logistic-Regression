# -*- coding: utf-8 -*-
"""FDS lab  9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cz2hDRYCZIQPD-IBfcNBMA25eju3bw9d
"""

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from ucimlrepo import fetch_ucirepo  # pip install ucimlrepo

# Fetch the dataset
lung_cancer = fetch_ucirepo(id=62)

# Extract features (X) and target (y)
X = lung_cancer.data.features.copy()  # Use .copy() to avoid Pandas warnings
y = lung_cancer.data.targets.copy()  # Use .copy() to avoid Pandas warnings

# Fill missing values
X.fillna(X.mean(), inplace=True)

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y.values.ravel(), test_size=0.2, random_state=42)

# Train Logistic Regression model with hyperparameter tuning
model = LogisticRegression(max_iter=5000)  # Increased max_iter to prevent warnings

param_grid = {
    'C': [0.01, 0.1, 1, 10, 100],
    'penalty': ['l1', 'l2'],
    'solver': ['liblinear', 'saga'],  # Use solvers that support both L1 and L2 regularization
}

grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy', verbose=1)
grid_search.fit(X_train, y_train)

# Best model evaluation
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"Best Parameters: {grid_search.best_params_}")
print(f"Model Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, y_pred))